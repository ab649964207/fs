
import os
import util

Import('env', 'sources')

module_src = os.path.join(env['fs_src'], 'fs', 'core')
sources += util.locate_source_files(module_src, '*.cxx')

rapidjson_base_dir = os.path.join(env['fs_vendor'], 'rapidjson')
rapidjson_inc_dir = os.path.join(rapidjson_base_dir, 'include')

sdd_base_dir = os.path.join(env['fs_vendor'], 'sdd')

include_paths = [sdd_base_dir]

env.Append(CCFLAGS = ['-Wall', '-pedantic', '-std=c++17'])  # Flags common to all options
# Include rapidjson as -isystem to skip warnings;
env.Append(CCFLAGS = ['-isystem' + os.path.abspath(rapidjson_inc_dir)])
env.Append(CPPPATH = [os.path.abspath(p) for p in include_paths])


if env['edebug']:
	env.Append( CCFLAGS = ['-g', '-DDEBUG', '-DEDEBUG' ] )
	env['fs_libname'] ='fs-edebug'
elif env['debug']:
	env.Append( CCFLAGS = ['-g', '-DDEBUG' ] )
	env['fs_libname'] ='fs-debug'
else:
	env.Append( CCFLAGS = ['-O3', '-DNDEBUG' ] )
	env['fs_libname'] ='fs'

fs_libs = ['boost_program_options', 'boost_serialization', 'boost_system', 'boost_timer', 'boost_chrono', 'rt', 'boost_filesystem', 'sdd', 'm']
env.Append( LIBS = fs_libs )

fs_lib_paths = [ os.path.join(env['fs'], env['build_basename']) ]
env.Append( LIBPATH = [ os.path.abspath(p) for p in fs_lib_paths ] )